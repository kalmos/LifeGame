###
# #
###

string(TOUPPER ${CMAKE_C_COMPILER_ID} CMAKE_C_COMPILER_ID)
string(TOUPPER ${CMAKE_CXX_COMPILER_ID} CMAKE_CXX_COMPILER_ID)

#Setting compiler option
if (${PROJECT_TYPE} STREQUAL C)
	include("${CMAKE_SOURCE_DIR}/cfg/${CMAKE_C_COMPILER_ID}.cconf")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${${CMAKE_C_COMPILER_ID}_FLAGS}" CACHE STRING "C f" FORCE)
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${${CMAKE_C_COMPILER_ID}_FLAGS_DEBUG}"	 CACHE STRING "C f d" FORCE)
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${${CMAKE_C_COMPILER_ID}_FLAGS_RELEASE}" CACHE STRING "C f r" FORCE)
	set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${${CMAKE_C_COMPILER_ID}_FLAGS_RELWITHDEBINFO}" CACHE STRING "C f rd" FORCE)
	set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} ${${CMAKE_C_COMPILER_ID}_FLAGS_MINSIZEREL}" CACHE STRING "C f mr" FORCE)
	set(USEDCOMPILER ${CMAKE_C_COMPILER_ID})

else (${PROJECT_TYPE} STREQUAL C)
	if (${PROJECT_TYPE} STREQUAL CXX)
		include(${CMAKE_SOURCE_DIR}/cfg/${CMAKE_CXX_COMPILER_ID}.cconf)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${${CMAKE_CXX_COMPILER_ID}_FLAGS}" CACHE STRING "Osx Cpp f" FORCE)
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_DEBUG}"	 CACHE STRING "Cpp f d" FORCE)
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELEASE}" CACHE STRING "Cpp f r" FORCE)
		set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELWITHDEBINFO}" CACHE STRING "Cpp f rd" FORCE)
		set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_MINSIZEREL}" CACHE STRING "Cpp f mr" FORCE)
		set(USEDCOMPILER ${CMAKE_CXX_COMPILER_ID})

	else (${PROJECT_TYPE} STREQUAL CXX)
		message(FATAL_ERROR "PROJECT_TYPE need to be easer C or CXX")

	endif(${PROJECT_TYPE} STREQUAL CXX)
endif (${PROJECT_TYPE} STREQUAL C)

project(${PROJECT_NAME} ${PROJECT_TYPE})

#Include default compiler options
#set(CONFIG_FILE "${CMAKE_SOURCE_DIR}/cfg/${CPP_COMPILER}.cconf")
#include(${CONFIG_FILE})

STRING(REGEX REPLACE "." "_" DEFINE_OS_VERSION_NUMBER ${CMAKE_SYSTEM_VERSION})
STRING(REGEX REPLACE "." "_" DEFINE_OS_ARCH_TYPE ${CMAKE_SYSTEM_PROCESSOR})

set(FULL_OS_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}")
add_definitions(-DOS_NAME="${CMAKE_SYSTEM_NAME}"
		-DOS_VERSION_NUMBER="${CMAKE_SYSTEM_VERSION}"
		-DOS_ARCH_TYPE="${CMAKE_SYSTEM_PROCESSOR}"
		-DFULL_OS_NAME="${FULL_OS_NAME}"
		-DPROJECT_NAME="${PROJECT_NAME}"
		-D${CMAKE_SYSTEM_NAME}
		-DVERSION_${DEFINE_OS_VERSION_NUMBER}
		-DARCH${DEFINE_OS_ARCH_TYPE})

set(CUSTOM_LIB_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/externs/lib/${FULL_OS_NAME}/")
set(CUSTOM_BIN_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/")

if (EXISTS "${CUSTOM_LIB_FOLDER}")
else (EXISTS "${CUSTOM_LIB_FOLDER}")
file(MAKE_DIRECTORY "${CUSTOM_LIB_FOLDER}")
endif (EXISTS "${CUSTOM_LIB_FOLDER}")

link_directories("${CUSTOM_LIB_FOLDER}")

#----------------------------------------
#-- INPUT/OUTPUT PATHS
#----------------------------------------
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(LIBRARY_OUTPUT_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)

 # verifie que le generateur supporte les multiples configuration
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DISTRIB  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DISTRIB ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DISTRIB ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_DISTRIB ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
else(CMAKE_CONFIGURATION_TYPES)
	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
	endif(NOT CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)

#-----------------------------------------------------------------------------
# Macros

include_directories("${CMAKE_SOURCE_DIR}/externs/include/")
# Set subdirectories to compile

include ("${CMAKE_SOURCE_DIR}/Rule/test.cmake")
